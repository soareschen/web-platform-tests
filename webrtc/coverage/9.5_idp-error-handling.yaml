spec_url: https://w3c.github.io/webrtc-pc/archives/20171023/webrtc.html
section: 9.5
desc: IdP Error Handling
steps:
  - status: tested
    files:
      - RTCPeerConnection-getIdentityAssertion
      - RTCPeerConnection-peerIdentity
    desc: >
      Errors in IdP processing will - in most cases - result in the failure of
      the procedure that invoked the IdP proxy.

      This will result in the rejection of the promise returned by
      getIdentityAssertion, createOffer, or createAnswer.

      An IdP proxy error causes a setRemoteDescription promise to be rejected if
      there is a target peer identity;

      IdP errors in calls to setRemoteDescription where there is no target peer
      identity cause the peerIdentity promise to be rejected instead.

  - status: trivial
    desc: >
      If an error occurs these promises are rejected with an RTCError if an
      error occurs in interacting with the IdP proxy. The following scenarios
      result in errors.
    steps:
      - status: tested
        files:
          - RTCPeerConnection-getIdentityAssertion
        desc: >
          An RTCPeerConnection might be configured with an identity provider,
          but loading of the IdP URI fails. Any procedure that attempts to
          invoke such an identity provider and cannot load the URI fails with an
          RTCError with errorDetail set to "idp-load-failure" and the
          httpRequestStatusCode attribute of the error set to the HTTP status
          code of the response.

      - status: todo
        desc: >
          If the IdP loads fails due to the TLS certificate used for the HTTPS
          connection not being trusted, it fails with an RTCError with
          errorDetail set to "idp-tls-failure". This typically happens when the
          IdP uses certificate pinning and an intermediary such as an enterprise
          firewall has intercepted the TLS connection.

      - status: tested
        files:
          - RTCPeerConnection-getIdentityAssertion
        desc: >
          If the script loaded from the identity provider is not valid
          JavaScript or does not implement the correct interfaces, it causes an
          IdP failure with an RTCError with errorDetail set to
          "idp-bad-script-failure".

      - status: tested
        files:
          - RTCPeerConnection-getIdentityAssertion
          - RTCPeerConnection-peerIdentity
        desc: >
          An apparently valid identity provider might fail in several ways. If
          the IdP token has expired, then the IdP MUST fail with an RTCError
          with errorDetail set to "idp-token-expired". If the IdP token is not
          valid, then the IdP MUST fail with an RTCError with errorDetail set to
          "idp-token-invalid". If an identity provider throws an exception or
          returns a promise that is ultimately rejected, then the procedure that
          depends on the IdP MUST also fail. These types of errors will cause an
          IdP failure with an RTCError with errorDetail set to
          "idp-execution-failure".

      - status: todo
        desc: >
          The user agent SHOULD limit the time that it allows for an IdP to 15
          seconds. This includes both the loading of the IdP proxy and the
          identity assertion generation or validation. Failure to do so
          potentially causes the corresponding operation to take an indefinite
          amount of time. This timer can be cancelled when the IdP proxy
          produces a response. Expiration of this timer cases an IdP failure
          with an RTCError with errorDetail set to "idp-timeout".

      - status: tested
        files:
          - RTCPeerConnection-getIdentityAssertion
        desc: >
          If the identity provider requires the user to login, the operation
          will fail RTCError with errorDetail set to "idp-need-login" and the
          idpLoginUrl attribute of the error set to the URL that can be used to
          login.

      - status: tested
        files:
          - RTCPeerConnection-peerIdentity
        desc: >
          Even when the IdP proxy produces a positive result, the procedure that
          uses this information might still fail. Additional validation of an
          RTCIdentityValidationResult value is still necessary. The procedure
          for validation of identity assertions describes additional steps that
          are required to successfully validate the output of the IdP proxy.

  - status: tested
    files:
      - RTCPeerConnection-getIdentityAssertion
      - RTCPeerConnection-peerIdentity
    desc: >
      Any error generated by the IdP MAY provide additional information in the
      idpErrorInfo attribute. The information in this string is defined by the
      IdP in use.
